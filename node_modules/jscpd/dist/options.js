"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const fs_1 = require("fs");
const fs_extra_1 = require("fs-extra");
const core_1 = require("@jscpd/core");
const finder_1 = require("@jscpd/finder");
const convertCliToOptions = (cli) => {
    const result = {
        minTokens: cli.minTokens ? parseInt(cli.minTokens) : undefined,
        minLines: cli.minLines ? parseInt(cli.minLines) : undefined,
        maxLines: cli.maxLines ? parseInt(cli.maxLines) : undefined,
        maxSize: cli.maxSize,
        debug: cli.debug,
        store: cli.store,
        pattern: cli.pattern,
        executionId: cli.executionId,
        silent: cli.silent,
        blame: cli.blame,
        verbose: cli.verbose,
        cache: cli.cache,
        output: cli.output,
        format: cli.format,
        formatsExts: finder_1.parseFormatsExtensions(cli.formatsExts),
        list: cli.list,
        mode: cli.mode,
        absolute: cli.absolute,
        noSymlinks: cli.noSymlinks,
        skipLocal: cli.skipLocal,
        ignoreCase: cli.ignoreCase,
        gitignore: cli.gitignore,
        exitCode: cli.exitCode,
    };
    if (cli.threshold !== undefined) {
        result.threshold = Number(cli.threshold);
    }
    if (cli.reporters) {
        result.reporters = cli.reporters.split(',');
    }
    if (cli.format) {
        result.format = cli.format.split(',');
    }
    if (cli.ignore) {
        result.ignore = cli.ignore.split(',');
    }
    if (cli.ignorePattern) {
        result.ignorePattern = cli.ignorePattern.split(',');
    }
    result.path = cli.path ? [cli.path].concat(cli.args) : cli.args;
    if (result.path.length === 0) {
        delete result.path;
    }
    Object.keys(result).forEach((key) => {
        if (typeof result[key] === 'undefined') {
            delete result[key];
        }
    });
    return result;
};
const readConfigJson = (config) => {
    const configFile = config ? path_1.resolve(config) : path_1.resolve('.jscpd.json');
    const configExists = fs_1.existsSync(configFile);
    if (configExists) {
        const result = Object.assign({ config: configFile }, fs_extra_1.readJSONSync(configFile));
        if (result.path) {
            result.path = result.path.map((path) => path_1.resolve(path_1.dirname(configFile), path));
        }
        return result;
    }
    return {};
};
const readPackageJsonConfig = () => {
    const config = path_1.resolve(process.cwd() + '/package.json');
    if (fs_1.existsSync(config)) {
        const json = fs_extra_1.readJSONSync(config);
        if (json.jscpd && json.jscpd.path) {
            json.jscpd.path = json.jscpd.path.map((path) => path_1.resolve(path_1.dirname(config), path));
        }
        return json.jscpd ? Object.assign({ config }, json.jscpd) : {};
    }
    return {};
};
function prepareOptions(cli) {
    const storedConfig = readConfigJson(cli.config);
    const packageJsonConfig = readPackageJsonConfig();
    const argsConfig = convertCliToOptions(cli);
    const result = Object.assign(Object.assign(Object.assign(Object.assign({}, core_1.getDefaultOptions()), packageJsonConfig), storedConfig), argsConfig);
    result.reporters = result.reporters || [];
    result.listeners = result.listeners || [];
    if (result.silent) {
        result.reporters = result.reporters
            .filter((reporter) => !reporter.includes('console'))
            .concat('silent');
    }
    if (result.threshold !== undefined) {
        result.reporters = [...result.reporters, 'threshold'];
    }
    return result;
}
exports.prepareOptions = prepareOptions;
//# sourceMappingURL=options.js.map