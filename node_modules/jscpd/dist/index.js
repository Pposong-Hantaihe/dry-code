"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@jscpd/core");
const safe_1 = require("colors/safe");
const finder_1 = require("@jscpd/finder");
const init_1 = require("./init");
const print_1 = require("./print");
const crypto_1 = require("crypto");
const store_1 = require("./init/store");
const tokenizer_1 = require("@jscpd/tokenizer");
const reporters_1 = require("./init/reporters");
const subscribers_1 = require("./init/subscribers");
const hooks_1 = require("./init/hooks");
const TIMER_LABEL = 'Detection time:';
exports.detectClones = (opts, store = undefined) => {
    const options = Object.assign(Object.assign({}, core_1.getDefaultOptions()), opts);
    options.format = options.format || tokenizer_1.getSupportedFormats();
    const files = finder_1.getFilesToDetect(options);
    const hashFunction = (value) => {
        return crypto_1.createHash('md5').update(value).digest('hex');
    };
    options.hashFunction = options.hashFunction || hashFunction;
    const currentStore = store || store_1.getStore(options.store);
    const statistic = new core_1.Statistic(options);
    const tokenizer = new tokenizer_1.Tokenizer();
    const detector = new finder_1.InFilesDetector(tokenizer, currentStore, statistic, options);
    reporters_1.registerReporters(options, detector);
    subscribers_1.registerSubscribers(options, detector);
    hooks_1.registerHooks(options, detector);
    if (!options.silent) {
        console.time(safe_1.italic(safe_1.grey(TIMER_LABEL)));
    }
    return detector.detect(files).then((clones) => {
        if (!options.silent) {
            console.timeEnd(safe_1.italic(safe_1.grey(TIMER_LABEL)));
        }
        return clones;
    });
};
function jscpd(argv, exitCallback) {
    return __awaiter(this, void 0, void 0, function* () {
        const packageJson = require(__dirname + '/../package.json');
        const cli = init_1.initCli(packageJson, argv);
        const options = init_1.initOptionsFromCli(cli);
        if (options.list) {
            print_1.printSupportedFormat();
        }
        if (options.debug) {
            print_1.printOptions(options);
        }
        if (!options.path || options.path.length === 0) {
            options.path = [process.cwd()];
        }
        if (options.debug) {
            const files = finder_1.getFilesToDetect(options);
            print_1.printFiles(files);
            return Promise.resolve([]);
        }
        else {
            const store = store_1.getStore(options.store);
            return exports.detectClones(options, store)
                .then((clones) => {
                if (clones.length > 0) {
                    exitCallback === null || exitCallback === void 0 ? void 0 : exitCallback(options.exitCode);
                }
                return clones;
            })
                .finally(() => {
                store.close();
            });
        }
    });
}
exports.jscpd = jscpd;
//# sourceMappingURL=index.js.map