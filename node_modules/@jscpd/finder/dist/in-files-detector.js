"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@jscpd/core");
const tokenizer_1 = require("@jscpd/tokenizer");
const validators_1 = require("./validators");
class InFilesDetector {
    constructor(tokenizer, store, statistic, options) {
        this.tokenizer = tokenizer;
        this.store = store;
        this.statistic = statistic;
        this.options = options;
        this.reporters = [];
        this.subscribes = [];
        this.postHooks = [];
        this.registerSubscriber(this.statistic);
    }
    registerReporter(reporter) {
        this.reporters.push(reporter);
    }
    registerSubscriber(subscriber) {
        this.subscribes.push(subscriber);
    }
    registerHook(hook) {
        this.postHooks.push(hook);
    }
    detect(fls) {
        const files = fls.filter((f) => !!f);
        if (files.length === 0) {
            return Promise.resolve([]);
        }
        const options = this.options;
        const hooks = [...this.postHooks];
        const store = this.store;
        const validators = [];
        if (options.skipLocal) {
            validators.push(new validators_1.SkipLocalValidator());
        }
        const detector = new core_1.Detector(this.tokenizer, store, validators, options);
        this.subscribes.forEach((listener) => {
            Object
                .entries(listener.subscribe())
                .map(([event, handler]) => detector.on(event, handler));
        });
        const detect = (entry, clones = []) => {
            const { path, content } = entry;
            const format = tokenizer_1.getFormatByFile(path, options.formatsExts);
            return detector
                .detect(path, content, format)
                .then((clns) => {
                if (clns) {
                    clones.push(...clns);
                }
                const file = files.pop();
                if (file) {
                    return detect(file, clones);
                }
                return clones;
            });
        };
        const processHooks = (hook, detectedClones) => {
            return hook
                .process(detectedClones)
                .then((clones) => {
                const nextHook = hooks.pop();
                if (nextHook) {
                    return processHooks(nextHook, clones);
                }
                return clones;
            });
        };
        return detect(files.pop())
            .then((clones) => {
            const hook = hooks.pop();
            if (hook) {
                return processHooks(hook, clones);
            }
            return clones;
        })
            .then((clones) => {
            const statistic = this.statistic.getStatistic();
            this.reporters.forEach((reporter) => {
                reporter.report(clones, statistic);
            });
            return clones;
        });
    }
}
exports.InFilesDetector = InFilesDetector;
//# sourceMappingURL=in-files-detector.js.map