"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const blamer_1 = require("blamer");
class BlamerHook {
    process(clones) {
        return Promise.all(clones.map((clone) => BlamerHook.blameLines(clone)));
    }
    static blameLines(clone) {
        return __awaiter(this, void 0, void 0, function* () {
            const blamer = new blamer_1.default();
            const blamedFileA = yield blamer.blameByFile(clone.duplicationA.sourceId);
            const blamedFileB = yield blamer.blameByFile(clone.duplicationB.sourceId);
            clone.duplicationA.blame = BlamerHook.getBlamedLines(blamedFileA, clone.duplicationA.start.line, clone.duplicationA.end.line);
            clone.duplicationB.blame = BlamerHook.getBlamedLines(blamedFileB, clone.duplicationB.start.line, clone.duplicationB.end.line);
            return clone;
        });
    }
    static getBlamedLines(blamedFiles, start, end) {
        // TODO rewrite the method
        const [file] = Object.keys(blamedFiles);
        const result = {};
        Object.keys(blamedFiles[file])
            .filter((lineNumber) => {
            return Number(lineNumber) >= start && Number(lineNumber) <= end;
        })
            .map((lineNumber) => blamedFiles[file][lineNumber])
            .forEach((info) => {
            result[info.line] = info;
        });
        return result;
    }
}
exports.BlamerHook = BlamerHook;
//# sourceMappingURL=blamer.js.map