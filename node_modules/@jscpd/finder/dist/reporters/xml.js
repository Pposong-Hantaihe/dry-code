"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const fs_extra_1 = require("fs-extra");
const core_1 = require("@jscpd/core");
const reports_1 = require("../utils/reports");
const safe_1 = require("colors/safe");
const path_1 = require("path");
class XmlReporter {
    constructor(options) {
        this.options = options;
    }
    report(clones) {
        let xmlDoc = '<?xml version="1.0" encoding="UTF-8" ?>';
        xmlDoc += '<pmd-cpd>';
        clones.forEach((clone) => {
            xmlDoc = `${xmlDoc}
      <duplication lines="${clone.duplicationA.end.line - clone.duplicationA.start.line}">
            <file path="${reports_1.escapeXml(reports_1.getPath(clone.duplicationA.sourceId, this.options))}" line="${clone.duplicationA.start.line}">
              <codefragment><![CDATA[${clone.duplicationA.fragment.replace(/]]>/i, 'CDATA_END')}]]></codefragment>
            </file>
            <file path="${reports_1.escapeXml(reports_1.getPath(clone.duplicationB.sourceId, this.options))}" line="${clone.duplicationB.start.line}">
              <codefragment><![CDATA[${clone.duplicationB.fragment.replace(/]]>/i, 'CDATA_END')}]]></codefragment>
            </file>
            <codefragment><![CDATA[${clone.duplicationA.fragment.replace(/]]>/i, 'CDATA_END')}]]></codefragment>
        </duplication>
      `;
        });
        xmlDoc += '</pmd-cpd>';
        fs_extra_1.ensureDirSync(core_1.getOption('output', this.options));
        fs_1.writeFileSync(core_1.getOption('output', this.options) + '/jscpd-report.xml', xmlDoc);
        console.log(safe_1.green(`XML report saved to ${path_1.join(this.options.output, 'jscpd-report.xml')}`));
    }
}
exports.XmlReporter = XmlReporter;
//# sourceMappingURL=xml.js.map